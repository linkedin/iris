server:
  host: 0.0.0.0
  port: 16649
  disable_auth: True

# Enabled modules for resolving complex user roles to individual usernames, processed
# in the order listed here.
role_lookups:
  - user # support for 'role' being username
  - mailing_list # mailing list config; see bottom of file
  # - oncall # oncall service integration
  - dummy # dummy role lookup used for testing purposes. Disable this in production.

metrics: dummy

# Change these to random long values when you run this in production
user_session:
  encrypt_key: 'abc'
  sign_key: '123'

# use this for LDAP settings for sync script lookup
# init_config_hook: iris_internal.api.init_config

#metrics: prometheus
#prometheus:
#  iris-sync-targets:
#    server_port: 8001
#  iris-sender:
#    server_port: 8002
#
#

#metrics: influx
#influxdb:
#  connect:
#    host: localhost
#    port: 8086
#    database: iris

db: &db
  conn:
    kwargs:
      scheme: mysql+pymysql
      user: root
      password: ""
      host: 127.0.0.1
      database: iris
      charset: utf8
    str: "%(scheme)s://%(user)s:%(password)s@%(host)s/%(database)s?charset=%(charset)s"
  query_limit: 500
  kwargs:
    pool_recycle: 3600
    echo: False
    pool_size: 100
    max_overflow: 100
    pool_timeout: 60
sender:
  debug: True
  host: 127.0.0.1
  port: 2321
  is_master: True

  # Sender that iris's notifications endpoint sends to
  master_sender:
    host: 127.0.0.1
    port: 2321

  api_host: http://localhost:16649

  # App used for sending notification messages + incidents
  sender_app: iris
  # RPC access log
  access_log:
    maxBytes: 10485760
    filename: './logs/sender_rpc.access.log'

#  slaves:
#    - host: 127.0.0.1
#      port: 2322
#    - host: 127.0.0.1
#      port: 2323

vendors: []
#- type: iris_slack
#  name: slack
#  auth_token: ''
#  base_url: 'https://slack.com/api/chat.postMessage'
#  iris_incident_url: ''
#  proxy: *proxy_shared
#  message_attachments:
#    fallback: 'Iris Alert Fired!'
#    color: 'danger'
#    pretext: '<!here> _Iris_ _Alert!_'

#  - type: iris_twilio
#    name: twilio_1
#    account_sid: ''
#    auth_token: ''
#    twilio_number: ''
#    relay_base_url: ''

applications:
 - dummy_app

healthcheck_path: /tmp/status

enable_gmail_oneclick: True
gmail_one_click_url_key: 'foo'
gmail_one_click_url_endpoint: 'http://localhost:16648/api/v0/gmail-oneclick/relay'

# Optionally, import ldap mailing lists and have the ability to target them in messages
#ldap_lists:
#  connection:
#    url: 'ldaps://your ldap url'
#    bind_args: ['your bind username', 'your bind password']
#  search_strings:
#    get_all_lists_filter: '(&(objectClass=group)(groupCN=*)(groupName=*))'
#    get_all_sub_lists_filter: '(&(objectClass=group)(partOf=%s)(groupCN=*)(groupName=*))'
#    list_search_string: 'OU=groups,OU=company,DC=com'
#    user_search_string: 'OU=users,OU=company,DC=com'
#    user_membership_filter: '(&(objectClass=user)(userName=*)(partOf=%s))'
#    user_account_name_field: 'userName'
#    list_cn_field: 'groupCN'
#    list_name_field: 'groupName'
#
#  # Max depth for recursing nested ldap lists.
#  max_depth: 3
#
#  # If a list result returns at least this many results, don't support unrolling at runtime.
#  max_unrolled_users: 100
#
#  # Every $n users, stop inserting into mysql to avoid crashing it. Comment these out to disable.
#  user_add_pause_interval: 500
#  user_add_pause_duration: 1

# Optionally, you can run iris-owa-sync to sync mails from OWA365:
#owa:
#  credentials:
#    username: ''
#    password: ''
#  smtp_address: 'foouser@foocompany.onmicrosoft.com'
#  # need a valid iris application for for owa script to connect to api to relay emails
#  iris_app: ''
#  iris_app_key: ''
#  api_host: http://localhost:16649
#  sleep_interval: 60
